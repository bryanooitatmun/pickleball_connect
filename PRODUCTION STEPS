# Converting Pickleball Connect to a Production Environment

Moving your Pickleball Connect application from development to production involves several important steps to ensure security, reliability, and performance. Here's a comprehensive guide:

## 1. Choose a Production Database

```python
# config.py (updated for production)
import os
from dotenv import load_dotenv

basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, '.env'))

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY')
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'app.db')

class ProductionConfig(Config):
    DEBUG = False
    # Use a more robust production-ready database
    # PostgreSQL is recommended for production
```

For production, use PostgreSQL:
1. Create a PostgreSQL database on your hosting platform
2. Update your `.env` file with the production database URL
3. Set `DATABASE_URL=postgresql://username:password@host:port/database_name`

## 2. Set Up a Production Web Server

Replace Flask's development server with Gunicorn:

```bash
# Install Gunicorn
pip install gunicorn

# Add to requirements.txt
echo "gunicorn==20.1.0" >> requirements.txt
```

Create a `wsgi.py` file in your project root:

```python
# wsgi.py
from app import create_app

app = create_app()

if __name__ == "__main__":
    app.run()
```

For production, use:
```bash
gunicorn wsgi:app
```

## 3. Set Secure Environment Variables

Create a production `.env` file with secure values:

```
FLASK_APP=run.py
FLASK_ENV=production
SECRET_KEY=long-random-generated-string
DATABASE_URL=postgresql://username:password@host:port/database_name
```

Generate a secure random secret key:
```python
import secrets
print(secrets.token_hex(32))
# Use the output as your SECRET_KEY
```

## 4. Configure HTTPS

Always use HTTPS in production. Most hosting platforms handle this for you, but if you're setting up your own server:

1. Obtain SSL certificates (Let's Encrypt offers free certificates)
2. Configure your web server (Nginx or Apache) to use HTTPS
3. Add HTTPS redirects

## 5. Set Up Logging

Enhance your logging setup for production:

```python
# In your app/__init__.py
import logging
from logging.handlers import RotatingFileHandler
import os

def create_app(config_class=Config):
    # ... existing code ...
    
    if not app.debug and not app.testing:
        if not os.path.exists('logs'):
            os.mkdir('logs')
        file_handler = RotatingFileHandler('logs/pickleball_connect.log',
                                          maxBytes=10240, backupCount=10)
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))
        file_handler.setLevel(logging.INFO)
        app.logger.addHandler(file_handler)
        
        app.logger.setLevel(logging.INFO)
        app.logger.info('Pickleball Connect startup')
    
    return app
```

## 6. Optimize Static Files

For production, consider:

1. Minifying CSS and JavaScript files
2. Using a CDN for static files
3. Implementing proper cache headers

Create a production static files build process:

```bash
# If using npm/webpack
npm install
npm run build
```

## 7. Deployment Options

### Option 1: Hosting Platforms

- **Heroku**:
  ```bash
  # Create Procfile
  echo "web: gunicorn wsgi:app" > Procfile
  
  # Deploy to Heroku
  heroku create pickleball-connect
  git push heroku main
  
  # Set environment variables
  heroku config:set SECRET_KEY=your-secret-key
  heroku config:set FLASK_APP=run.py
  heroku config:set FLASK_ENV=production
  
  # Add PostgreSQL
  heroku addons:create heroku-postgresql:hobby-dev
  
  # Run migrations
  heroku run flask db upgrade
  ```

- **Railway.app**:
  - Connect your GitHub repository
  - Set environment variables in the dashboard
  - Add PostgreSQL plugin
  - Set build command: `pip install -r requirements.txt`
  - Set start command: `gunicorn wsgi:app`

- **Render**:
  - Connect your GitHub repository
  - Create a web service
  - Set environment variables
  - Add PostgreSQL database
  - Set build command: `pip install -r requirements.txt`
  - Set start command: `gunicorn wsgi:app`

### Option 2: VPS (e.g., DigitalOcean, AWS EC2, Linode)

1. Set up a Linux server (Ubuntu recommended)
2. Install required packages:
   ```bash
   sudo apt update
   sudo apt install python3-pip python3-venv postgresql nginx
   ```

3. Clone your repository:
   ```bash
   git clone https://github.com/yourusername/pickleball-connect.git
   cd pickleball-connect
   ```

4. Set up a virtual environment:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   pip install -r requirements.txt
   ```

5. Configure PostgreSQL:
   ```bash
   sudo -u postgres createuser --interactive
   sudo -u postgres createdb pickleball
   ```

6. Set up environment variables:
   ```bash
   cp .env.example .env
   # Edit .env with production values
   ```

7. Set up Nginx:
   ```bash
   # Create an Nginx configuration file
   sudo nano /etc/nginx/sites-available/pickleball-connect
   ```

   Nginx configuration:
   ```
   server {
       listen 80;
       server_name yourdomain.com;
       
       location / {
           proxy_pass http://localhost:8000;
           proxy_set_header Host $host;
           proxy_set_header X-Real-IP $remote_addr;
       }
   }
   ```

8. Enable the site:
   ```bash
   sudo ln -s /etc/nginx/sites-available/pickleball-connect /etc/nginx/sites-enabled
   sudo nginx -t
   sudo systemctl restart nginx
   ```

9. Set up systemd service for Gunicorn:
   ```bash
   sudo nano /etc/systemd/system/pickleball.service
   ```

   Service configuration:
   ```
   [Unit]
   Description=Gunicorn instance to serve Pickleball Connect
   After=network.target
   
   [Service]
   User=www-data
   Group=www-data
   WorkingDirectory=/path/to/pickleball-connect
   Environment="PATH=/path/to/pickleball-connect/venv/bin"
   EnvironmentFile=/path/to/pickleball-connect/.env
   ExecStart=/path/to/pickleball-connect/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 wsgi:app
   
   [Install]
   WantedBy=multi-user.target
   ```

10. Start and enable the service:
    ```bash
    sudo systemctl start pickleball
    sudo systemctl enable pickleball
    ```

11. Set up SSL with Let's Encrypt:
    ```bash
    sudo apt install certbot python3-certbot-nginx
    sudo certbot --nginx -d yourdomain.com
    ```

## 8. Security Considerations

1. **Update your dependencies regularly**:
   ```bash
   pip install --upgrade pip
   pip install --upgrade -r requirements.txt
   ```

2. **Implement rate limiting** for API endpoints:
   ```bash
   pip install Flask-Limiter
   ```

3. **Set secure headers**:
   ```python
   from flask_talisman import Talisman
   
   # In your create_app function
   Talisman(app, content_security_policy=None)
   ```

4. **Implement CSRF protection**:
   ```python
   # This is already included with Flask-WTF
   app.config['WTF_CSRF_ENABLED'] = True
   ```

5. **Sanitize user inputs** and validate data:
   ```python
   # Continue using WTForms for validation
   # Consider additional HTML sanitization with bleach
   pip install bleach
   ```

## 9. Monitoring and Maintenance

1. **Set up monitoring** with services like New Relic, Sentry, or Datadog:
   ```bash
   pip install sentry-sdk
   ```

   ```python
   # In your app/__init__.py
   import sentry_sdk
   from sentry_sdk.integrations.flask import FlaskIntegration
   
   sentry_sdk.init(
       dsn="your-sentry-dsn",
       integrations=[FlaskIntegration()]
   )
   ```

2. **Implement automated backups** for your database
3. **Set up CI/CD pipeline** for automated testing and deployment

## 10. Scaling Considerations

As your application grows:

1. **Horizontal scaling**: Deploy multiple instances of your application
2. **Load balancing**: Distribute traffic across instances
3. **Caching**: Implement Redis or Memcached for caching
4. **Database optimization**: Indexes, query optimization, connection pooling
5. **Asynchronous processing**: Use Celery for background tasks

## Production Deployment Checklist

Before going live:

1. ✅ Secure the database connection
2. ✅ Set a strong SECRET_KEY
3. ✅ Disable DEBUG mode
4. ✅ Set up HTTPS
5. ✅ Configure proper error handling
6. ✅ Set up logging
7. ✅ Test with production settings
8. ✅ Run database migrations
9. ✅ Set up automatic backups
10. ✅ Test your signup/login, payment, and booking processes thoroughly
11. ✅ Set up monitoring
12. ✅ Configure a proper web server (Gunicorn + Nginx)
13. ✅ Review security considerations
14. ✅ Set up a maintenance plan

Following these steps will help you successfully transition your Pickleball Connect application from development to a secure, scalable production environment.